name: MLOps Pipeline (Smoke)

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]
  pull_request:

jobs:
  smoke:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # Gate: don't run AWS calls on PRs from forks (secrets are unavailable there)
      - name: Gate AWS steps
        id: gate
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ] && [ "${{ github.event.pull_request.head.repo.fork }}" = "true" ]; then
            echo "run_aws=false" >> "$GITHUB_OUTPUT"
            echo "This is a PR from a fork; skipping AWS steps (no secrets available)."
          else
            echo "run_aws=true" >> "$GITHUB_OUTPUT"
          fi

      # Optional but helpful: verify secrets exist when we intend to run AWS steps
      - name: Sanity check secrets
        if: steps.gate.outputs.run_aws == 'true'
        run: |
          [ -n "${{ secrets.AWS_ACCESS_KEY_ID }}" ] || { echo "ERROR: Missing AWS_ACCESS_KEY_ID secret"; exit 1; }
          [ -n "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ] || { echo "ERROR: Missing AWS_SECRET_ACCESS_KEY secret"; exit 1; }
          [ -n "${{ secrets.SAGEMAKER_ENDPOINT_NAME }}" ] || { echo "ERROR: Missing SAGEMAKER_ENDPOINT_NAME secret"; exit 1; }
          echo "Secrets present (values are masked)."

      - name: Set up Python
        if: steps.gate.outputs.run_aws == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install boto3
        if: steps.gate.outputs.run_aws == 'true'
        run: |
          python -m pip install --upgrade pip
          pip install boto3

      - name: Configure AWS credentials
        if: steps.gate.outputs.run_aws == 'true'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Verify caller and region
        if: steps.gate.outputs.run_aws == 'true'
        run: |
          aws sts get-caller-identity
          aws configure get region || echo "region env not set (but action set it)"

      - name: Invoke SageMaker endpoint
        if: steps.gate.outputs.run_aws == 'true'
        env:
          SAGEMAKER_ENDPOINT_NAME: ${{ secrets.SAGEMAKER_ENDPOINT_NAME }}
        run: |
          python - <<'PY'
          import os, boto3
          endpoint = os.environ.get("SAGEMAKER_ENDPOINT_NAME")
          if not endpoint:
            raise SystemExit("Missing secret SAGEMAKER_ENDPOINT_NAME")
          rt = boto3.client("sagemaker-runtime", region_name="us-east-1")
          resp = rt.invoke_endpoint(
              EndpointName=endpoint,
              ContentType="text/csv",
              Accept="application/json",
              Body=b"3,1,34,0,0,7.8292,2",
          )
          print(resp["Body"].read().decode())
          PY

