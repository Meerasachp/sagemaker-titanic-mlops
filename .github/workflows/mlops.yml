name: MLOps Pipeline (Smoke)

on:
  push:
    branches: [ main, master ]
  pull_request:
  workflow_dispatch:

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  SAGEMAKER_ENDPOINT_NAME: ${{ secrets.SAGEMAKER_ENDPOINT_NAME }}

jobs:
  smoke-test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install boto3

      - name: Invoke serverless endpoint (with clear diagnostics)
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}
          SAGEMAKER_ENDPOINT_NAME: ${{ env.SAGEMAKER_ENDPOINT_NAME }}
        run: |
          python - <<'PY'
          import os, sys, json, boto3, botocore

          def need(var):
            val = os.getenv(var)
            if not val:
              print(f"::error:: Missing required env var: {var}")
              sys.exit(1)
            return val

          region   = need("AWS_REGION")
          endpoint = need("SAGEMAKER_ENDPOINT_NAME")

          try:
            sts = boto3.client("sts", region_name=region)
            ident = sts.get_caller_identity()
            print("AWS caller:", ident.get("Arn", "<unknown>"))

            rt = boto3.client("sagemaker-runtime", region_name=region)
            row = "3,1,34,0,0,7.8292,2"
            resp = rt.invoke_endpoint(
                EndpointName=endpoint,
                ContentType="text/csv",
                Accept="application/json",
                Body=row.encode("utf-8"),
            )
            print(resp["Body"].read().decode())

          except botocore.exceptions.NoCredentialsError:
            print("::error:: AWS credentials not provided.")
            sys.exit(1)
          except botocore.exceptions.ClientError as e:
            print(f"::error:: AWS ClientError: {e}")
            sys.exit(1)
          except Exception as e:
            print(f"::error:: Unexpected error: {type(e).__name__}: {e}")
            sys.exit(1)
          PY
